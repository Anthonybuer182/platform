// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package postgresql

import (
	"context"
)

const getDeleteOrderList = `-- name: GetDeleteOrderList :many
select
       o.order_id,
       o.user_id,
       o.order_date,
       o.amount,
       o.order_state
from "orders".orders o
`

func (q *Queries) GetDeleteOrderList(ctx context.Context) ([]OrdersOrder, error) {
	rows, err := q.db.QueryContext(ctx, getDeleteOrderList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersOrder
	for rows.Next() {
		var i OrdersOrder
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderDate,
			&i.Amount,
			&i.OrderState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE "orders".orders
SET
    order_state = $2
WHERE order_id = $1
`

type UpdateOrderParams struct {
	OrderID    int32  `json:"order_id"`
	OrderState string `json:"order_state"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder, arg.OrderID, arg.OrderState)
	return err
}
